// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//title, couponCode, expiryDate
model Coupon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  couponCode  String
  expiryDate  DateTime
  isPublished Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Banner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  link        String
  imageUrl    String
  isPublished Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  isPublished Boolean

  products  Product[]
  trainings Training[]
  marketIds String[]   @db.ObjectId
  markets   Market[]   @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  logoUrl     String?
  description String?
  isPublished Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  slug         String   @unique
  imageUrl     String?
  description  String?
  isPublished  Boolean
  sku          String?
  barCode      String?
  prodictPrice Float
  salePrice    Float
  tags         String[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Training {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  content     String?
  isPublished Boolean

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

//User =>Admin,Farmer,Customer,Agent
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?

  products      Product[]
  role          UserRole       @default(USER)
  farmerProfile FarmerProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FarmerProfile {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  code               String
  contactPerson      String?
  contactPersonPhone String?
  profileImageUrl    String?
  email              String
  name               String
  notes              String?
  phone              String
  physicalAddress    String?
  terms              String?
  isPublished        Boolean
  landSize           Float
  mainCrop           String
  products           String[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// RelationShips
// 1 to 1 RelationShip User =>Profile Relation
// 1 to many =>Category  =>Product Relation
// many to many =>Markret =>Category
